name: Publish Library

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code from the repository
      - uses: actions/checkout@v3

      # Set up JDK 17 for the build
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Cache Gradle to improve build performance
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Set up Gradle to run the build
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      # Decode the GPG key stored in the GitHub Secrets
      - name: Decode GPG key
        env:
          GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY_RING_FILE_BASE64 }}
        run: |
          echo $GPG_SECRET_KEY | base64 --decode > ./secret.gpg

      # Build the project with Gradle
      - name: Build with Gradle
        run: ./gradlew :JetAds:build --warning-mode all


      # Publish the build to Maven Central using in-memory signing
      - name: Publish to Maven Central (In-memory signing)
        env:
          ORG_GRADLE_PROJECT_mavenCentralUsername: ${{ secrets.OSSRH_USERNAME }}
          ORG_GRADLE_PROJECT_mavenCentralPassword: ${{ secrets.OSSRH_PASSWORD }}
          ORG_GRADLE_PROJECT_signingInMemoryKey: ${{ secrets.GPG_SECRET_KEY }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{ secrets.GPG_KEY_ID }}
          ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{ secrets.GPG_PASSWORD }}
        run: ./gradlew publishAllPublicationsToMavenCentral --no-configuration-cache --info

      # Upload the release asset to GitHub releases
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./JetAds/build/outputs/aar/JetAds-release.aar
          asset_name: jet-ads-${{ env.RELEASE_VERSION }}.aar
          asset_content_type: application/aar